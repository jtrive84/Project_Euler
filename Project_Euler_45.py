#!/usr/bin/env python

"""
===============================================================================
Project Euler Problem 45                                                      |
===============================================================================
Triangle, pentagonal, and hexagonal numbers are generated by the following
formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""
from itertools import count


def trinbr(n):
    """
    Return the triangular number evaluated at n.
    """
    return((n*(n+1))//2)

def pentnbr(n):
    """
    Return the pentagonal number evaluated at n.
    """
    return((n*(3*n-1))//2)

def hexnbr(n):
    """
    Return the hexagonal number evaluated at n.
    """
    return(n*(2*n-1))


def tri_stream(start=1):
    """
    Return stream of triangular numbers.
    """
    for i in count(start=start):
        yield(i, trinbr(i))


def pent_stream(start=1):
    """
    Return stream of pentagonal numbers.
    """
    for i in count(start=start):
        yield(i, pentnbr(i))


def hex_stream(start=1):
    """
    Return stream of hexagonal numbers.
    """
    for i in count(start=start):
        yield(i, hexnbr(i))



tri_inc = 10000
t_indx = 1
p_indx = 0
h_indx = 0
iter_p = 0
iter_h = 0
iter_ps = list()
iter_hs = list()


while True:
    ts = tri_stream(start=t_indx)
    ttups = [next(ts) for i in range(tri_inc)]
    t_indx = tri_inc + t_indx
    _, iter_ts = zip(*ttups)

    iter_ts = [i for i in iter_ts if i>40755]
    t_max   = max(iter_ts)
    ps      = pent_stream(start=(p_indx+1))

    while iter_p<=t_max:

        iterval = next(ps)
        p_indx  = iterval[0]
        iter_p  = iterval[1]
        iter_ps.append(iter_p)

    iter_ps = [i for i in iter_ps if i>40755]
    p_max   = max(iter_ps)
    hs      = hex_stream(start=(h_indx+1))
    cmn     = set(iter_ts).intersection(set(iter_ps))

    while iter_h<=p_max:
        iterval2 = next(hs)
        h_indx = iterval2[0]
        iter_h = iterval2[1]
        iter_hs.append(iter_h)

    iter_hs = [i for i in iter_hs if i>40755]
    cmn = cmn.intersection(set(iter_hs))
    if len(cmn)>0: break

# solution => 1533776805
